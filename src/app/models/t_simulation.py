from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model import Model
from app import util


class TSimulation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, status=None, result=None):  # noqa: E501
        """TSimulation - a model defined in OpenAPI

        :param id: The id of this TSimulation.  # noqa: E501
        :type id: str
        :param status: The status of this TSimulation.  # noqa: E501
        :type status: str
        :param result: The result of this TSimulation.  # noqa: E501
        :type result: float
        """
        self.openapi_types = {"id": str, "status": str, "result": float}

        self.attribute_map = {"id": "id", "status": "status", "result": "result"}

        self._id = id
        self._status = status
        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> "TSimulation":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The T_Simulation of this TSimulation.  # noqa: E501
        :rtype: TSimulation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TSimulation.


        :return: The id of this TSimulation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TSimulation.


        :param id: The id of this TSimulation.
        :type id: str
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this TSimulation.


        :return: The status of this TSimulation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TSimulation.


        :param status: The status of this TSimulation.
        :type status: str
        """
        allowed_values = ["STARTED", "RETRY", "FAILURE", "SUCCESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError("Invalid value for `status` ({0}), must be one of {1}".format(status, allowed_values))

        self._status = status

    @property
    def result(self) -> float:
        """Gets the result of this TSimulation.


        :return: The result of this TSimulation.
        :rtype: float
        """
        return self._result

    @result.setter
    def result(self, result: float):
        """Sets the result of this TSimulation.


        :param result: The result of this TSimulation.
        :type result: float
        """

        self._result = result
