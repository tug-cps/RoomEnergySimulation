from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model import Model
from app import util


class TSimulation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, status=None, heating_energy_consumption=None, cooling_energy_consumption=None, date_done=None
    ):  # noqa: E501
        """TSimulation - a model defined in OpenAPI

        :param id: The id of this TSimulation.  # noqa: E501
        :type id: str
        :param status: The status of this TSimulation.  # noqa: E501
        :type status: str
        :param heating_energy_consumption: The heating_energy_consumption of this TSimulation.  # noqa: E501
        :type heating_energy_consumption: float
        :param cooling_energy_consumption: The cooling_energy_consumption of this TSimulation.  # noqa: E501
        :type cooling_energy_consumption: float
        :param date_done: The date_done of this TSimulation.  # noqa: E501
        :type date_done: datetime
        """
        self.openapi_types = {
            "id": str,
            "status": str,
            "heating_energy_consumption": float,
            "cooling_energy_consumption": float,
            "date_done": datetime,
        }

        self.attribute_map = {
            "id": "id",
            "status": "status",
            "heating_energy_consumption": "heating_energy_consumption",
            "cooling_energy_consumption": "cooling_energy_consumption",
            "date_done": "date_done",
        }

        self._id = id
        self._status = status
        self._heating_energy_consumption = heating_energy_consumption
        self._cooling_energy_consumption = cooling_energy_consumption
        self._date_done = date_done

    @classmethod
    def from_dict(cls, dikt) -> "TSimulation":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The T_Simulation of this TSimulation.  # noqa: E501
        :rtype: TSimulation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TSimulation.


        :return: The id of this TSimulation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TSimulation.


        :param id: The id of this TSimulation.
        :type id: str
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this TSimulation.


        :return: The status of this TSimulation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TSimulation.


        :param status: The status of this TSimulation.
        :type status: str
        """
        allowed_values = ["STARTED", "RETRY", "FAILURE", "SUCCESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError("Invalid value for `status` ({0}), must be one of {1}".format(status, allowed_values))

        self._status = status

    @property
    def heating_energy_consumption(self) -> float:
        """Gets the heating_energy_consumption of this TSimulation.


        :return: The heating_energy_consumption of this TSimulation.
        :rtype: float
        """
        return self._heating_energy_consumption

    @heating_energy_consumption.setter
    def heating_energy_consumption(self, heating_energy_consumption: float):
        """Sets the heating_energy_consumption of this TSimulation.


        :param heating_energy_consumption: The heating_energy_consumption of this TSimulation.
        :type heating_energy_consumption: float
        """

        self._heating_energy_consumption = heating_energy_consumption

    @property
    def cooling_energy_consumption(self) -> float:
        """Gets the cooling_energy_consumption of this TSimulation.


        :return: The cooling_energy_consumption of this TSimulation.
        :rtype: float
        """
        return self._cooling_energy_consumption

    @cooling_energy_consumption.setter
    def cooling_energy_consumption(self, cooling_energy_consumption: float):
        """Sets the cooling_energy_consumption of this TSimulation.


        :param cooling_energy_consumption: The cooling_energy_consumption of this TSimulation.
        :type cooling_energy_consumption: float
        """

        self._cooling_energy_consumption = cooling_energy_consumption

    @property
    def date_done(self) -> datetime:
        """Gets the date_done of this TSimulation.


        :return: The date_done of this TSimulation.
        :rtype: datetime
        """
        return self._date_done

    @date_done.setter
    def date_done(self, date_done: datetime):
        """Sets the date_done of this TSimulation.


        :param date_done: The date_done of this TSimulation.
        :type date_done: datetime
        """

        self._date_done = date_done
